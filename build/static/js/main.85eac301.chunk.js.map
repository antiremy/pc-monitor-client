{"version":3,"sources":["components/base-components/temp.jsx","components/cpu-components/core.jsx","components/base-components/load-chart.jsx","components/base-components/progress.jsx","components/cpu.jsx","components/gpu.jsx","components/nicehash.jsx","components/main.jsx","App.js","reportWebVitals.js","theme.js","index.js"],"names":["getColor","val","green","yellow","red","Temp","props","Box","position","display","style","transform","CircularProgress","variant","value","color","grey","top","left","bottom","right","alignItems","justifyContent","flexDirection","Typography","component","Math","round","makeStyles","root","border","alignContent","padding","minWidth","minHeight","textAlign","modifyDomain","LoadChart","data","load","Paper","width","marginLeft","paddingRight","toFixed","height","showLabels","showGrid","showTicks","showLine","decimal","purple","valueField","argumentField","Progress","marginBottom","mr","LinearProgress","whiteSpace","caption","CPU","name","temp","clock","power","loadHistory","cores","memUsed","memAvail","ramLoad","className","marginTop","size","GPU","coreClock","memClock","memTotal","Nicehash","flex","format","ts","totalProfitability","prices","BTCUSDC","parseFloat","unpaidAmount","Main","useState","setData","cpuLoadHistory","setCpuLoadHistory","gpuLoadHistory","setGpuLoadHistory","nicehashData","setNicehashData","useEffect","socket","socketIOClient","on","console","log","d","saveLoads","cpu","find","hw","hardwareType","cpuLoad","sensors","Load","newVal","t","Date","state","splice","gpu","gpuLoad","objs","report","r","includes","split","Temperature","Clock","Power","ram","Data","i","push","v","SmallData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","type","primary","main","secondary","error","A400","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.85eac301.chunk.js","sourcesContent":["import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { green, yellow, red, grey } from '@material-ui/core/colors';\r\nfunction getColor(val) {\r\n    if (val < 65) return green[300]\r\n    else if (val >= 65 && val < 85) return yellow[300]\r\n    else if (val >= 85) return red[300]\r\n}\r\n\r\nexport default function Temp(props) {\r\n    return (\r\n        <Box position=\"relative\" display=\"inline-flex\">\r\n            <div style={{ transform: 'rotate(-180deg)' }}>\r\n                <CircularProgress variant=\"determinate\" {...props} value={100} style={{ color: grey[700], position: 'absolute' }} />\r\n                <CircularProgress variant=\"determinate\" {...props} style={{ color: getColor(props.value) }} />\r\n            </div>\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                flexDirection=\"column\"\r\n            >\r\n                <Typography variant=\"h6\" component=\"div\" color=\"textPrimary\">Temp</Typography>\r\n                <Typography variant=\"h4\" component=\"div\" style={{color: getColor(props.value)}}>{Math.round(props.value)}°C</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","import { Box, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        border: '1px solid grey',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'stretch',\r\n        justifyContent: 'center',\r\n        padding: '5px',\r\n        minWidth: '50px',\r\n        minHeight: '20px',\r\n        textAlign: 'center'\r\n    },\r\n  });\r\n\r\nexport default function Core({clock, load, power}) {\r\n    const classes = useStyles();\r\n    return(<Box className={classes.root}>\r\n        <div><Typography variant=\"caption\">{clock.toFixed(0)} MHz</Typography></div>\r\n        <div><Typography variant=\"caption\">{power.toFixed(0)} Watts</Typography></div>\r\n        <div><Typography variant=\"caption\">{load.toFixed(0)}%</Typography></div>\r\n\r\n    </Box>)\r\n}","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    ArgumentAxis,\r\n    ValueAxis,\r\n    Chart,\r\n    AreaSeries,\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { ValueScale } from '@devexpress/dx-react-chart';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { green, yellow, red, purple } from '@material-ui/core/colors';\r\n\r\nconst modifyDomain = ([start, end]) => [0, 100];\r\n\r\nfunction getColor(val) {\r\n    if (val < 70) return green[300]\r\n    else if (val >= 70 && val < 90) return yellow[300]\r\n    else if (val >= 90) return red[300]\r\n}\r\n\r\nexport default function LoadChart({ data, load }) {\r\n    return (<Paper component=\"div\">\r\n        <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"end\" alignContent=\"right\" marginLeft=\"4px\" paddingRight=\"20px\" >\r\n            <Typography variant=\"h6\" display=\"inline\">Load</Typography>\r\n            <Box marginLeft=\"auto\" color={getColor(load)}><Typography variant=\"h4\" display=\"inline\" >{load.toFixed(0)}%</Typography></Box>\r\n        </Box>\r\n        <Chart\r\n            data={data}\r\n            height={100}\r\n        >\r\n            <ValueScale modifyDomain={modifyDomain} />\r\n            <ArgumentAxis showLabels={false} showGrid={false} showTicks={false} />\r\n\r\n            <ValueAxis showLabels={false} showLine={false} showGrid={false} decimal={false} />\r\n\r\n            <AreaSeries color={purple[300]} valueField=\"load\" argumentField=\"t\" />\r\n        </Chart>\r\n    </Paper>)\r\n}","import React from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Progress(props) {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\" marginBottom=\"8px\">\r\n            <Box width=\"100%\" mr={1}>\r\n                <LinearProgress variant=\"determinate\" {...props} />\r\n            </Box>\r\n            <Box whiteSpace=\"nowrap\">\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{props.caption}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Temp from './base-components/temp'\r\nimport Usage from './base-components/usage'\r\nimport CPUGraphic from './cpu-components/cpu-graphic'\r\nimport LoadChart from './base-components/load-chart';\r\nimport MemProgress from './base-components/progress'\r\n\r\nexport default function CPU({ name, temp, load, clock, power, cores, loadHistory, memUsed, memAvail, ramLoad }) {\r\n    return (<div className=\"statsContainer\">\r\n        <Typography variant=\"h5\" component=\"div\">CPU</Typography>\r\n        <Typography variant=\"h5\" component=\"div\">{name}</Typography>\r\n        <Typography variant=\"body1\">Clock: {(clock / 1000).toFixed(2)} GHz</Typography>\r\n        <Typography variant=\"body1\">Power: {power.toFixed(0)} Watts</Typography>\r\n        {/* <div>\r\n            <div className=\"chartContainer\"><CPUGraphic cores={cores} /></div>\r\n        </div> */}\r\n\r\n        <div style={{ width: '80%' }}>\r\n            <Typography variant=\"h6\">RAM</Typography>\r\n            <MemProgress variant=\"determinate\" value={ramLoad} caption={`${(memUsed.toFixed(2))}/${(memUsed + memAvail).toFixed(2)} GB (${Math.round(ramLoad)}%)`} />\r\n        </div>\r\n        <Box marginTop=\"auto\" display=\"flex\">\r\n            <div className=\"chartContainer\">\r\n                {/* <Usage\r\n                    variant=\"determinate\"\r\n                    value={load}\r\n                    size={125}\r\n                /> */}\r\n                <LoadChart data={loadHistory} load={load} />\r\n            </div>\r\n            <div className=\"chartContainer\">\r\n                <Temp\r\n                    variant=\"determinate\"\r\n                    value={temp}\r\n                    size={125}\r\n                />\r\n            </div>\r\n\r\n        </Box>\r\n\r\n    </div>)\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport MemProgress from './base-components/progress'\r\nimport Temp from './base-components/temp'\r\nimport LoadChart from './base-components/load-chart'\r\nimport Usage from './base-components/usage'\r\n\r\nexport default function GPU({ name, temp, load, coreClock, memClock, memUsed, memTotal, loadHistory }) {\r\n    return (<div className=\"statsContainer\">\r\n        <div><Typography variant=\"h5\">GPU</Typography></div>\r\n        <div><Typography variant=\"h5\">{name}</Typography></div>\r\n        <div><Typography variant=\"body1\">Core: {coreClock.toFixed(0)} MHz</Typography></div>\r\n        <div><Typography variant=\"body1\">Mem: {memClock.toFixed(0)} MHz</Typography></div>\r\n        <div style={{ width: '80%' }}>\r\n            <Typography variant=\"h6\">VRAM</Typography>\r\n            <MemProgress variant=\"determinate\" value={memUsed / memTotal * 100} caption={`${(memUsed / 1000).toFixed(2)}/${(memTotal / 1000).toFixed(2)} GB (${Math.round(memUsed / memTotal * 100)}%)`} />\r\n        </div>\r\n\r\n        <Box marginTop=\"auto\" display=\"flex\">\r\n            <div className=\"chartContainer\">\r\n                {/* <Usage\r\n                    variant=\"determinate\"\r\n                    value={load}\r\n                    size={125}\r\n                /> */}\r\n                <LoadChart data={loadHistory} load={load} />\r\n            </div>\r\n            <div className=\"chartContainer\">\r\n                <Temp\r\n                    variant=\"determinate\"\r\n                    value={temp}\r\n                    size={125}\r\n                />\r\n            </div>\r\n\r\n\r\n        </Box>\r\n\r\n    </div>)\r\n}","import { Typography, Box, TableContainer, TableHead, TableRow, TableCell, TableBody, Table, Paper } from '@material-ui/core';\r\nimport Moment from 'react-moment';\r\n\r\nexport default function Nicehash({ data }) {\r\n    return (<div className=\"statsContainer\" style={{ flex: 1 }}>\r\n        <Typography variant=\"h5\">Mining Stats</Typography>\r\n        {/* <Typography variant=\"h6\">Wallet Address: {data.btcAddress}</Typography> */}\r\n        {data ? <Box textAlign=\"center\">\r\n            <Typography variant=\"body1\">\r\n                As of <Moment format='YYYY-MM-DD hh:mm:ss'>{data.ts}</Moment>\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n                Profitability/24 hrs: {data.totalProfitability.toFixed(8)}BTC (${(data.totalProfitability * data.prices.BTCUSDC).toFixed(2)})\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n                Unpaid: {parseFloat(data.unpaidAmount).toFixed(8)}BTC (${(parseFloat(data.unpaidAmount) * data.prices.BTCUSDC).toFixed(2)})\r\n            </Typography>\r\n            {/* <TableContainer component={Paper}>\r\n                <Table size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell align=\"right\">Algorithm</TableCell>\r\n                            <TableCell align=\"right\">Speed</TableCell>\r\n                            <TableCell align=\"right\">Profitability</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.miningRigs ? data.miningRigs.map((r) => (\r\n                            <TableRow key={r.name}>\r\n                                <TableCell component=\"th\" scope=\"row\">{r.name}</TableCell>\r\n                                <TableCell align=\"right\">{r.stats[0].algorithm.description}</TableCell>\r\n                                <TableCell align=\"right\">{r.stats[0].speedAccepted.toFixed(2)} MH/s</TableCell>\r\n                                <TableCell align=\"right\">{r.profitability.toFixed(10)} BTC/24 hours</TableCell>\r\n                            </TableRow>\r\n                        )) : null}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer> */}\r\n        </Box> : null}\r\n    </div>)\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport CPU from './cpu';\r\nimport GPU from './gpu';\r\nimport RAM from './ram';\r\nimport HDD from './hdd'\r\nimport Nicehash from './nicehash'\r\n\r\nconst ENDPOINT = \"http://localhost:23465\";\r\n\r\nexport default function Main() {\r\n    const [data, setData] = useState([])\r\n    const [cpuLoadHistory, setCpuLoadHistory] = useState([])\r\n    const [gpuLoadHistory, setGpuLoadHistory] = useState([])\r\n    const [nicehashData, setNicehashData] = useState()\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.on(\"connect\", () => {\r\n            console.log('connected')\r\n        })\r\n\r\n        socket.on('nicehash', (d) => {\r\n            setNicehashData(d)\r\n        })\r\n\r\n        socket.on(\"stats\", (d) => {\r\n            setData(d)\r\n            saveLoads(d)\r\n        })\r\n\r\n    }, []);\r\n\r\n    const saveLoads = (data) => {\r\n        if (data) {\r\n            var cpu = data.find(hw => hw.hardwareType === 'CPU')\r\n            if (cpu) {\r\n                var cpuLoad = cpu.sensors.Load['CPU Total']\r\n                var newVal =  { t: new Date(), load: cpuLoad }\r\n                setCpuLoadHistory(state => [...state, newVal].splice(-60, 60))\r\n            }\r\n\r\n\r\n            var gpu = data.find(hw => hw.hardwareType === 'GpuNvidia')\r\n            if (gpu) {\r\n                var gpuLoad = gpu.sensors.Load['GPU Core']\r\n                var newVal =  { t: new Date(), load: gpuLoad }\r\n                setGpuLoadHistory(state => [...state, newVal].splice(-60, 60))\r\n            }\r\n        }\r\n    }\r\n\r\n    var objs = []\r\n\r\n    for (let hw of data) {\r\n        switch (hw.hardwareType) {\r\n            case 'CPU':\r\n                var cores = {}\r\n                var name = hw.report.find(r => r.includes('Name:')).split('Name: ')[1]\r\n                var temp = hw.sensors.Temperature['CPU Package']\r\n                var load = hw.sensors.Load['CPU Total']\r\n                var clock = hw.sensors.Clock['CPU Core #1']\r\n                var power = hw.sensors.Power['CPU Package']\r\n                var ram = data.find(d => d.hardwareType === 'RAM')\r\n                if (ram) {\r\n                    var memUsed = ram.sensors.Data['Used Memory']\r\n                    var memAvail = ram.sensors.Data['Available Memory']\r\n                    var ramLoad = ram.sensors.Load['Memory']\r\n                }\r\n                for (let i in hw.sensors.Load) {\r\n                    if (i.includes(\"CPU Core #\")) {\r\n                        cores[i.split(\"CPU Core #\")[1]] = {\r\n                            power: hw.sensors.Load[i],\r\n                            load: hw.sensors.Power[i],\r\n                            clock: hw.sensors.Clock[i],\r\n                        }\r\n                    }\r\n                }\r\n                objs.push(<CPU name={name} temp={temp} load={load} clock={clock} power={power} cores={cores} loadHistory={cpuLoadHistory} memUsed={memUsed} memAvail={memAvail} ramLoad={ramLoad} v/>)\r\n                break;\r\n            case 'GpuNvidia':\r\n                var name = hw.report.find(r => r.includes('Name:')).split('Name: ')[1]\r\n                var temp = hw.sensors.Temperature['GPU Core']\r\n                var load = hw.sensors.Load['GPU Core']\r\n                var coreClock = hw.sensors.Clock['GPU Core']\r\n                var memClock = hw.sensors.Clock['GPU Memory']\r\n                var memTotal = hw.sensors.SmallData['GPU Memory Total']\r\n                var memUsed = hw.sensors.SmallData['GPU Memory Used']\r\n                objs.push(<GPU name={name} temp={temp} load={load} coreClock={coreClock} memClock={memClock} memUsed={memUsed} memTotal={memTotal} loadHistory={gpuLoadHistory} />)\r\n                break;\r\n            // case 'RAM': \r\n            //     var memUsed = hw.sensors.Data['Used Memory']\r\n            //     var memAvail = hw.sensors.Data['Available Memory']\r\n            //     var load = hw.sensors.Load['Memory']\r\n            //     objs.push(<RAM memUsed={memUsed} memAvail={memAvail} load={load} />)\r\n            //     break;\r\n            // case 'HDD':\r\n            //     if (!hw.sensors.Load) break;\r\n            //     var id = hw.id.split('/hdd/')[1]\r\n            //     var load = hw.sensors.Load['Used Space']\r\n            //     var temp = hw.sensors.Temperature ? hw.sensors.Temperature.Temperature : null\r\n            //     objs.push(<HDD id={id} load={load} temp={temp}/>)\r\n            //     break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    if (nicehashData) objs.push(<Nicehash data={nicehashData} />)\r\n\r\n    return (<div className=\"allContainer\">\r\n        {data ? objs : 'No data'}\r\n    </div>)\r\n}","import './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { green, purple, red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: purple[300],\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}